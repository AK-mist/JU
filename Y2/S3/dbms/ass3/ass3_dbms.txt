-- courses
CREATE TABLE courses  
( 
	cid INT PRIMARY KEY, 
	cname VARCHAR2(50) NOT NULL UNIQUE, 
 	intake_capacity INT NOT NULL
);

-- subjects
CREATE TABLE subjects 
( 
    sid INT PRIMARY KEY, 
    sname VARCHAR2(50) NOT NULL UNIQUE,
    credit INT NOT NULL
);

-- course_subject
CREATE TABLE course_subject 
( 
    cid int NOT NULL, 
    sid int NOT NULL,
    PRIMARY KEY (cid, sid),
    FOREIGN KEY (cid) REFERENCES courses (cid) ON DELETE CASCADE,
    FOREIGN KEY (sid) REFERENCES subjects (sid) ON DELETE CASCADE
);

-- students
CREATE TABLE students
(
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    student_id INT NOT NULL UNIQUE,
    name VARCHAR2(100) NOT NULL,
    dob DATE,
    phone_number VARCHAR2(10) NOT NULL CHECK (LENGTH(phone_number) = 10),
    locality VARCHAR2(150),
    city VARCHAR2(30),
    PIN VARCHAR2(10),
    state VARCHAR2(30),
    country VARCHAR2(30),
    address VARCHAR2(258) GENERATED ALWAYS AS (
    	locality || ', ' || city || ', ' || state || ', ' || PIN || ', ' || country
    )
);

-- Grade_Marks
CREATE TABLE grade_marks
(
    grade_id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    grade VARCHAR2(2) NOT NULL UNIQUE,
    low_range INT NOT NULL CHECK (low_range >= 0),
    high_range INT NOT NULL CHECK (high_range <= 100),
    CONSTRAINT check_ranges CHECK (low_range <= high_range)
);

-- Enrollment
CREATE TABLE enrollment
(
    eid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    student_id INT UNIQUE,
    course_id INT NOT NULL,
    FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
    FOREIGN KEY (course_id) REFERENCES courses(cid) ON DELETE CASCADE
);

-- subject_enrollment
CREATE TABLE subject_enrollment
(
    seid INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    enrollment_id INT NOT NULL,
    subject_id INT NOT NULL,
    FOREIGN KEY (enrollment_id) REFERENCES enrollment(eid) ON DELETE CASCADE,
    FOREIGN KEY (subject_id) REFERENCES subjects(sid) ON DELETE CASCADE
    -- CHECK (
    --     (SELECT COUNT(*) FROM subject_enrollment se WHERE se.enrollment_id = enrollment_id) <= 6
    -- ),
    -- CHECK (
    -- 	EXISTS(SELECT 1 FROM course_subject cs WHERE cs.course_id = (SELECT course_id FROM enrollment e WHERE e.eid = enrollment_id) AND cs.subject_id = subject_id)
    -- )
);

-- grade
CREATE TABLE grade
(
    seid INT PRIMARY KEY,
    -- score INT CHECK (score >= 0 AND score <= 100),
    grade VARCHAR2(1) CHECK (grade IN ('S', 'A', 'B', 'C', 'D', 'E', 'F')),
    FOREIGN KEY (seid) REFERENCES subject_enrollment(seid) ON DELETE CASCADE
);




